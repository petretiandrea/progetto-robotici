
#include <constants.h>
#include <iostream>
#include <argos3/core/simulator/simulator.h>
#include <argos3/core/simulator/loop_functions.h>
#include <loop-functions/evolution/evolution_loop.h>
#include <common/BNGenome.h>
#include <common/FileLogger.h>
#include <ga/ga.h>

using namespace std::chrono;


static performance::FileLogger logger("performance/", "evolve_" + utility::createMetaInfoFilename());

float best_score = 0;
GAGenome* best_genome;

void evaluatePopulation(GAPopulation& population) {

    cout << "Evaluating generation #" << population.geneticAlgorithm()->generation() << endl;
    for(int i = 0; i < population.size(); i++) {
        cout << "\tEvaluating genome " << i << endl;
        population.individual(i).evaluate();
        float score = population.individual(i).score();
        if(score > best_score) {
            best_genome = &population.individual(i);
            best_score = best_genome->score();
            logger.saveGenomeAsBest(*best_genome);
        }
    }
    cout << "Generation # " << population.geneticAlgorithm()->generation() << " completed!" << endl;

    logger.saveGenerationPerformance(population);
}

/*
int main() {

    static argos::CSimulator& simulator = argos::CSimulator::GetInstance();

    simulator.SetExperimentFileName("genetic/experiment.argos");
    simulator.LoadExperiment();

    auto rnd = newrandom::Random(constants::RANDOM_SEED);

    // setup genetic algo
    auto experiment = bngenome::Experiment {
            .simulator = &simulator,
            .loop = dynamic_cast<EvolutionLoop*>(&simulator.GetLoopFunctions()),
            .nTrials = constants::N_TRIAL
    };

    experiment.loop->GenerateRandomSpawnLocation(constants::N_TRIAL);

    string genomes[] = {
        "1001000000010000000000000000100110000000000001010000000001001000001010100011000000011000000000101000010000000100000010000000001000010001101000001000111010000001100100011100100000010100000000100010010110100000000000110010001001000000001000101010110101000000100100001010000001000000000000101101100000010100100000100100011100000011001000000010101000010100110010000000001000000010000000100100000010011100",
        "0101010000010000001000000100101010000001000000001010000000001000000000000000010000001100000010000000001001000000000001010001000001001000001000000100100101010001000000100000010100010101100000000010000000100001000000100000001000010001010010010111010001000001000001000000010010010000010100000100000001100000000100000100100000000000010000000100100100000000000000000000100110111000110001001000000010001100",
        "1001100000000001000000000000010000000100000001010000000010000000000000011000000100010000000100000000100001000000000000000100010101110000000011001000001000100011011010100011000110000000010000000000001001000010000100100110000101001010000000000010010000000000011000100000000011000000100000000000001111100000000100001000100000010001000000010000001001100000100100000000110000010010001001100010010100000000",
        "0010000000000011100101001000001000000000000000100100011010000100000010000011000000000101000000000010000010000000001000000010000100000001010000101000000010000000011010000000100010011000010000000001010101110010000010010000100010000000001000000000000001000000010000101110000000000010001001011000110000000000000000001100100001100100001001001100000110100010000110001010101000010010000010000000110000001000",
        "0010001100000000100100010001001000000100000011110000000000001100000001000101000010010101000000001000010000100000000000001010100110010101000100001000000000000100000001000000010101010001000110110000000000000100000001100100000000010000000100000010110000000000000111000000001100010001000000010000000000000010000110011101000111001001010000100000000010010000000010100101010000010101100011010010100000000001",
        "0000100000000001000101000100010001010001010001001000000001000101001010000000000000100100100000000000000000100010000000000000000010100001100110000000000100000000010100000010000000000000000000000010000000000000001000011010011110000010010000000010000100000000000001010110000000000000101000000000000000000010101000000110000001000001000000000001000000100001010001001010000100100000001110000001000000001000",
        "0010000000011000001100000000011000001000000000010000100000000100000100010001000000100000100001000000111000000000110000010000100000000111100001000000010010000001011001100010110000000000110101000001001000101110010010100011100010000000000100010000000000100000000010000011000001000101000000110000010000010000000000000101000010000000000100000000100110000000000000000000000100000000010011010011001100000000",
        "0000000000000010000010000001001000100100000001010000110001000010000101000000000101000001000000000000000001100111000010001100000100000011010100110010000000110000100000100000100100000000000000000000100000000001010000010000000110010000000000001000000001010000000100110000100000000000000100001101000010010110000000000010010101000100010000000000000000000000000000000111001101001010001011100010001011011111",
        "0000000110001010110000000000000011000100000000010010010000010001000010010001000111000100000000000000000010100000000000010110100011010000001000000000110110011100000100011100111000000110000010000110000001110000000000010110011000000000100001101001000000101100100010100011000100101010001010011000010000000100001100000000000000110000001010011001011000000000101000100000010000001000000100101000010000100001",
  };

    for(auto &stringGen : genomes) {
        GA1DBinaryStringGenome genome(constants::GENOME_SIZE);
        genome.userData(&experiment);
        for(int j = 0; j < genome.size(); j++){
            genome.gene(j, stringGen[j] == '0' ? 0 : 1);
        }
        if(stringGen == "0000000110001010110000000000000011000100000000010010010000010001000010010001000111000100000000000000000010100000000000010110100011010000001000000000110110011100000100011100111000000110000010000110000001110000000000010110011000000000100001101001000000101100100010100011000100101010001010011000010000000100001100000000000000110000001010011001011000000000101000100000010000001000000100101000010000100001")
        {
            cout << "a" << endl;
        }

        cout << "Gen " << genome << endl;
        cout << " Score " << bngenome::genomeEvaluator(genome) << endl;
    }
    return 0;
}
*/


int main() {

    static argos::CSimulator& simulator = argos::CSimulator::GetInstance();

    simulator.SetExperimentFileName("genetic/experiment.argos");
    simulator.LoadExperiment();

    auto rnd = newrandom::Random(constants::RANDOM_SEED);

    // setup genetic algo
    auto experiment = bngenome::Experiment {
        .simulator = &simulator,
        .loop = dynamic_cast<EvolutionLoop*>(&simulator.GetLoopFunctions()),
        .nTrials = constants::N_TRIAL
    };

    experiment.loop->GenerateRandomSpawnLocation(constants::N_TRIAL);

    GA1DBinaryStringGenome genome1(constants::GENOME_SIZE, bngenome::genomeEvaluator, &experiment);
    genome1.initializer(bngenome::genomeInitializer(constants::BIAS, &rnd));

    GAPopulation population(genome1);
    population.userData(&experiment);
    population.evaluator(evaluatePopulation);

    //GARealGenome genome(8, allele, evaluate);
    GASteadyStateGA ga(population);
    ga.maximize();
    ga.populationSize(constants::POPULATION);
    ga.nBestGenomes(0);
    ga.nReplacement(constants::REPLACEMENT);
    ga.nGenerations(constants::GENERATION);
    ga.pMutation(constants::PROB_MUTATION);
    ga.pCrossover(constants::PROB_CROSSOVER);
    ga.flushFrequency(0);

    std::cout << "Initializing genetic..." << std::endl;
    std::cout <<"NUM OF BEST IS: " << ga.nBestGenomes() << std::endl;
    std::cout <<"pCrossover is: " << ga.pCrossover() << std::endl;
    std::cout <<"pMutation is: " << ga.pMutation() << std::endl;
    std::cout <<"num of replacement is: " << ga.nReplacement() << std::endl;
    std::cout <<"NUM of pop is: " << ga.populationSize() << std::endl;
    std::cout <<"cga freq is : " << ga.flushFrequency() << std::endl;

    ga.initialize(1234);

    do {
        ga.step();
    } while (!ga.done());

    logger.close();

    simulator.Destroy();

    return 0;
}